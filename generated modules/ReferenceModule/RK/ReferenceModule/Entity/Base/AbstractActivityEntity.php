<?php
/**
 * Reference.
 *
 * @copyright Ralf Koester (RK)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Ralf Koester <ralf@familie-koester.de>.
 * @link http://k62.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace RK\ReferenceModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use RK\ReferenceModule\Traits\EntityWorkflowTrait;
use RK\ReferenceModule\Traits\StandardFieldsTrait;

use RuntimeException;
use ServiceUtil;
use Zikula\Core\Doctrine\EntityAccess;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for activity entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class AbstractActivityEntity extends EntityAccess
{
    /**
     * Hook entity workflow field and behaviour.
     */
    use EntityWorkflowTrait;

    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'activity';
    
    /**
     * @Assert\Type(type="bool")
     * @var boolean Option to bypass validation if needed
     */
    protected $_bypassValidation = false;
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @Assert\Choice(callback="getWorkflowStateAllowedValues", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * Select in which language the activity should be shown. Select "all" for every language.
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Regex(pattern="/\s/", match=false, message="This value must not contain space chars.")
     * @Assert\Length(min="0", max="255")
     * @Assert\Locale()
     * @var string $displayLanguage
     */
    protected $displayLanguage = '';
    
    /**
     * This is the title of your activity.
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $title
     */
    protected $title = '';
    
    /**
     * Title image meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $titleImageMeta
     */
    protected $titleImageMeta = [];
    
    /**
     * The image should have a ratio of 3:1. The width should be not less than 1200px. The title image will be used at the top of the activity page.
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
        mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var string $titleImage
     */
    protected $titleImage = null;
    
    /**
     * Full title image path as url.
     *
     * @Assert\Type(type="string")
     * @Assert\Url()
     * @var string $titleImageUrl
     */
    protected $titleImageUrl = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $copyrightTitleImage
     */
    protected $copyrightTitleImage = '';
    
    /**
     * Reference image meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $referenceImageMeta
     */
    protected $referenceImageMeta = [];
    
    /**
     * This image is the reference of the activity.
     * @ORM\Column(length=255, nullable=true)
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
        mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     * )
     * @var string $referenceImage
     */
    protected $referenceImage = null;
    
    /**
     * Full reference image path as url.
     *
     * @Assert\Type(type="string")
     * @Assert\Url()
     * @var string $referenceImageUrl
     */
    protected $referenceImageUrl = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $copyrightReferenceImage
     */
    protected $copyrightReferenceImage = '';
    
    /**
     * this description will be shown in the overview
     * @ORM\Column(type="text", length=500)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="500")
     * @var text $teaserDescription
     */
    protected $teaserDescription = '';
    
    /**
     * @ORM\Column(type="text", length=5000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="5000")
     * @var text $activityDescription
     */
    protected $activityDescription = '';
    
    /**
     * You can use the infofields to display some special infos like the year of creation or the specific NC brand or whatever fits to the activity. The info field 1 will appear also inside the headline. All other info fields will not.
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $infoField1
     */
    protected $infoField1 = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $infoField2
     */
    protected $infoField2 = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $infoField3
     */
    protected $infoField3 = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $infoField4
     */
    protected $infoField4 = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $infoField5
     */
    protected $infoField5 = '';
    
    
    /**
     * Bidirectional - Many attachedImages [activities] are linked by one activity [attached image] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="RK\ReferenceModule\Entity\AttachedImageEntity", inversedBy="attachedImages")
     * @ORM\JoinTable(name="rk_refere_attachedimage")
     * @Assert\Type(type="RK\ReferenceModule\Entity\AttachedImageEntity")
     * @var \RK\ReferenceModule\Entity\AttachedImageEntity $activity
     */
    protected $activity;
    
    
    /**
     * ActivityEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->initWorkflow();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Returns the _bypass validation.
     *
     * @return boolean
     */
    public function get_bypassValidation()
    {
        return $this->_bypassValidation;
    }
    
    /**
     * Sets the _bypass validation.
     *
     * @param boolean $_bypassValidation
     *
     * @return void
     */
    public function set_bypassValidation($_bypassValidation)
    {
        $this->_bypassValidation = $_bypassValidation;
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        $this->id = intval($id);
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        $this->workflowState = isset($workflowState) ? $workflowState : '';
    }
    
    /**
     * Returns the display language.
     *
     * @return string
     */
    public function getDisplayLanguage()
    {
        return $this->displayLanguage;
    }
    
    /**
     * Sets the display language.
     *
     * @param string $displayLanguage
     *
     * @return void
     */
    public function setDisplayLanguage($displayLanguage)
    {
        $this->displayLanguage = isset($displayLanguage) ? $displayLanguage : '';
    }
    
    /**
     * Returns the title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Sets the title.
     *
     * @param string $title
     *
     * @return void
     */
    public function setTitle($title)
    {
        $this->title = isset($title) ? $title : '';
    }
    
    /**
     * Returns the title image.
     *
     * @return string
     */
    public function getTitleImage()
    {
        return $this->titleImage;
    }
    
    /**
     * Sets the title image.
     *
     * @param string $titleImage
     *
     * @return void
     */
    public function setTitleImage($titleImage)
    {
        $this->titleImage = isset($titleImage) ? $titleImage : '';
    }
    
    /**
     * Returns the title image url.
     *
     * @return string
     */
    public function getTitleImageUrl()
    {
        return $this->titleImageUrl;
    }
    
    /**
     * Sets the title image url.
     *
     * @param string $titleImageUrl
     *
     * @return void
     */
    public function setTitleImageUrl($titleImageUrl)
    {
        $this->titleImageUrl = isset($titleImageUrl) ? $titleImageUrl : '';
    }
    
    /**
     * Returns the title image meta.
     *
     * @return array
     */
    public function getTitleImageMeta()
    {
        return $this->titleImageMeta;
    }
    
    /**
     * Sets the title image meta.
     *
     * @param array $titleImageMeta
     *
     * @return void
     */
    public function setTitleImageMeta($titleImageMeta = [])
    {
        $this->titleImageMeta = isset($titleImageMeta) ? $titleImageMeta : '';
    }
    
    /**
     * Returns the copyright title image.
     *
     * @return string
     */
    public function getCopyrightTitleImage()
    {
        return $this->copyrightTitleImage;
    }
    
    /**
     * Sets the copyright title image.
     *
     * @param string $copyrightTitleImage
     *
     * @return void
     */
    public function setCopyrightTitleImage($copyrightTitleImage)
    {
        $this->copyrightTitleImage = isset($copyrightTitleImage) ? $copyrightTitleImage : '';
    }
    
    /**
     * Returns the reference image.
     *
     * @return string
     */
    public function getReferenceImage()
    {
        return $this->referenceImage;
    }
    
    /**
     * Sets the reference image.
     *
     * @param string $referenceImage
     *
     * @return void
     */
    public function setReferenceImage($referenceImage)
    {
        $this->referenceImage = $referenceImage;
    }
    
    /**
     * Returns the reference image url.
     *
     * @return string
     */
    public function getReferenceImageUrl()
    {
        return $this->referenceImageUrl;
    }
    
    /**
     * Sets the reference image url.
     *
     * @param string $referenceImageUrl
     *
     * @return void
     */
    public function setReferenceImageUrl($referenceImageUrl)
    {
        $this->referenceImageUrl = $referenceImageUrl;
    }
    
    /**
     * Returns the reference image meta.
     *
     * @return array
     */
    public function getReferenceImageMeta()
    {
        return $this->referenceImageMeta;
    }
    
    /**
     * Sets the reference image meta.
     *
     * @param array $referenceImageMeta
     *
     * @return void
     */
    public function setReferenceImageMeta($referenceImageMeta = [])
    {
        $this->referenceImageMeta = $referenceImageMeta;
    }
    
    /**
     * Returns the copyright reference image.
     *
     * @return string
     */
    public function getCopyrightReferenceImage()
    {
        return $this->copyrightReferenceImage;
    }
    
    /**
     * Sets the copyright reference image.
     *
     * @param string $copyrightReferenceImage
     *
     * @return void
     */
    public function setCopyrightReferenceImage($copyrightReferenceImage)
    {
        $this->copyrightReferenceImage = isset($copyrightReferenceImage) ? $copyrightReferenceImage : '';
    }
    
    /**
     * Returns the teaser description.
     *
     * @return text
     */
    public function getTeaserDescription()
    {
        return $this->teaserDescription;
    }
    
    /**
     * Sets the teaser description.
     *
     * @param text $teaserDescription
     *
     * @return void
     */
    public function setTeaserDescription($teaserDescription)
    {
        $this->teaserDescription = isset($teaserDescription) ? $teaserDescription : '';
    }
    
    /**
     * Returns the activity description.
     *
     * @return text
     */
    public function getActivityDescription()
    {
        return $this->activityDescription;
    }
    
    /**
     * Sets the activity description.
     *
     * @param text $activityDescription
     *
     * @return void
     */
    public function setActivityDescription($activityDescription)
    {
        $this->activityDescription = isset($activityDescription) ? $activityDescription : '';
    }
    
    /**
     * Returns the info field 1.
     *
     * @return string
     */
    public function getInfoField1()
    {
        return $this->infoField1;
    }
    
    /**
     * Sets the info field 1.
     *
     * @param string $infoField1
     *
     * @return void
     */
    public function setInfoField1($infoField1)
    {
        $this->infoField1 = isset($infoField1) ? $infoField1 : '';
    }
    
    /**
     * Returns the info field 2.
     *
     * @return string
     */
    public function getInfoField2()
    {
        return $this->infoField2;
    }
    
    /**
     * Sets the info field 2.
     *
     * @param string $infoField2
     *
     * @return void
     */
    public function setInfoField2($infoField2)
    {
        $this->infoField2 = isset($infoField2) ? $infoField2 : '';
    }
    
    /**
     * Returns the info field 3.
     *
     * @return string
     */
    public function getInfoField3()
    {
        return $this->infoField3;
    }
    
    /**
     * Sets the info field 3.
     *
     * @param string $infoField3
     *
     * @return void
     */
    public function setInfoField3($infoField3)
    {
        $this->infoField3 = isset($infoField3) ? $infoField3 : '';
    }
    
    /**
     * Returns the info field 4.
     *
     * @return string
     */
    public function getInfoField4()
    {
        return $this->infoField4;
    }
    
    /**
     * Sets the info field 4.
     *
     * @param string $infoField4
     *
     * @return void
     */
    public function setInfoField4($infoField4)
    {
        $this->infoField4 = isset($infoField4) ? $infoField4 : '';
    }
    
    /**
     * Returns the info field 5.
     *
     * @return string
     */
    public function getInfoField5()
    {
        return $this->infoField5;
    }
    
    /**
     * Sets the info field 5.
     *
     * @param string $infoField5
     *
     * @return void
     */
    public function setInfoField5($infoField5)
    {
        $this->infoField5 = isset($infoField5) ? $infoField5 : '';
    }
    
    
    /**
     * Returns the activity.
     *
     * @return \RK\ReferenceModule\Entity\AttachedImageEntity
     */
    public function getActivity()
    {
        return $this->activity;
    }
    
    /**
     * Sets the activity.
     *
     * @param \RK\ReferenceModule\Entity\AttachedImageEntity $activity
     *
     * @return void
     */
    public function setActivity($activity = null)
    {
        $this->activity = $activity;
    }
    
    
    
    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     *
     * @return string The display title
     */
    public function getTitleFromDisplayPattern()
    {
        $listHelper = ServiceUtil::get('rk_reference_module.listentries_helper');
    
        $formattedTitle = ''
                . $this->getTitle()
                . ' '
                . $this->getInfoField1();
    
        return $formattedTitle;
    }
    
    
    /**
     * Returns a list of possible choices for the workflowState list field.
     * This method is used for validation.
     *
     * @return array List of allowed choices
     */
    public static function getWorkflowStateAllowedValues()
    {
        $serviceManager = ServiceUtil::getManager();
        $helper = $serviceManager->get('rk_reference_module.listentries_helper');
        $listEntries = $helper->getWorkflowStateEntriesForActivity();
    
        $allowedValues = ['initial'];
        foreach ($listEntries as $entry) {
            $allowedValues[] = $entry['value'];
        }
    
        return $allowedValues;
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return boolean Whether everything is valid or not
     */
    public function validate()
    {
        if (true === $this->_bypassValidation) {
            return true;
        }
    
        $validator = ServiceUtil::get('validator');
        $errors = $validator->validate($this);
    
        if (count($errors) > 0) {
            $flashBag = ServiceUtil::get('session')->getFlashBag();
            foreach ($errors as $error) {
                $flashBag->add('error', $error->getMessage());
            }
    
            return false;
        }
    
        return true;
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        $args = [];
    
        $args['id'] = $this['id'];
    
        if (property_exists($this, 'slug')) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'rkreferencemodule.ui_hooks.activities';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Activity ' . $this->createCompositeIdentifier() . ': ' . $this->getTitleFromDisplayPattern();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!($this->id)) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifiers
        $this->setId(0);
    
        // reset workflow
        $this->resetWorkflow();
    
        // reset upload fields
        $this->setTitleImage(null);
        $this->setTitleImageMeta([]);
        $this->setTitleImageUrl('');
        $this->setReferenceImage(null);
        $this->setReferenceImageMeta([]);
        $this->setReferenceImageUrl('');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
